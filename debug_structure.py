#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
現在の構造を詳細にデバッグ
"""

def create_jinjer_headers():
    """jinjer形式CSVのヘッダー（133列）を生成"""
    headers = []
    
    # 基本情報（5列）
    headers.extend([
        '名前', '*従業員ID', '*年月日', '*打刻グループID', '所属グループ名'
    ])
    
    # スケジュール情報（14列）- スケジュール外復帰予定時刻を追加
    headers.extend([
        'スケジュール雛形ID', '出勤予定時刻', '退勤予定時刻',
        '休憩予定時刻1', '復帰予定時刻1', '休憩予定時刻2', '復帰予定時刻2',
        '休憩予定時刻3', '復帰予定時刻3', '休憩予定時刻4', '復帰予定時刻4',
        '休憩予定時刻5', '復帰予定時刻5', 'スケジュール外休憩予定時刻', 'スケジュール外復帰予定時刻'
    ])
    
    # 休日設定（1列）
    headers.extend([
        '休日（0:法定休日1:所定休日2:法休(振替休出)3:所休(振替休出)4:法休(時間外休出)5:所休(時間外休出)）'
    ])
    
    # 実際の出退勤時刻（20列）- 最大10シフト対応
    headers.extend([
        '出勤1', '退勤1', '出勤2', '退勤2', '出勤3', '退勤3', '出勤4', '退勤4', '出勤5', '退勤5',
        '出勤6', '退勤6', '出勤7', '退勤7', '出勤8', '退勤8', '出勤9', '退勤9', '出勤10', '退勤10'
    ])
    
    # 実際の休憩時刻（20列）- 最大10回休憩対応
    headers.extend([
        '休憩1', '復帰1', '休憩2', '復帰2', '休憩3', '復帰3', '休憩4', '復帰4', '休憩5', '復帰5',
        '休憩6', '復帰6', '休憩7', '復帰7', '休憩8', '復帰8', '休憩9', '復帰9', '休憩10', '復帰10'
    ])
    
    # 食事時間（4列）
    headers.extend([
        '食事1開始', '食事1終了', '食事2開始', '食事2終了'
    ])
    
    # 外出・再入（10列）- 5回に削減
    headers.extend([
        '外出1', '再入1', '外出2', '再入2', '外出3', '再入3', '外出4', '再入4', '外出5', '再入5'
    ])
    
    # 休日休暇（10列）
    headers.extend([
        '休日休暇名1', '休日休暇名1：種別', '休日休暇名1：開始時間', '休日休暇名1：終了時間', '休日休暇名1：理由',
        '休日休暇名2', '休日休暇名2：種別', '休日休暇名2：開始時間', '休日休暇名2：終了時間', '休日休暇名2：理由'
    ])
    
    # 管理情報（7列）
    headers.extend([
        '打刻時コメント', '管理者備考',
        '勤務状況（0:未打刻1:欠勤）', '遅刻取消処理の有無（0:無1:有）', '早退取消処理の有無（0:無1:有）',
        '遅刻（0:有1:無）', '早退（0:有1:無）'
    ])
    
    # 直行・直帰（10列）- 5シフトに削減
    headers.extend([
        '直行1', '直帰1', '直行2', '直帰2', '直行3', '直帰3', '直行4', '直帰4', '直行5', '直帰5'
    ])
    
    # 打刻区分ID（10列）
    for i in range(1, 11):
        headers.append(f'打刻区分ID:{i}')
    
    # 勤務状況フラグ（5列）
    headers.extend(['未打刻', '欠勤', '休日打刻', '休暇打刻', '実績確定状況'])
    
    # 労働時間計算（13列）
    headers.extend([
        '総労働時間', '実労働時間', '休憩時間', '総残業時間',
        '法定内残業時間（スケジュール軸）', '法定内残業時間（労働時間軸）', '法定外残業時間', '深夜時間',
        '不足労働時間数（スケジュール軸）', '不足労働時間数（労働時間軸）',
        '申請承認済総残業時間', '申請承認済法定内残業時間', '申請承認済法定外残業時間'
    ])
    
    # 乖離時間（3列）- 133列制限のため3列に削減
    headers.extend([
        '出勤乖離時間（出勤時刻ー入館時刻）', '退勤乖離時間（退館時刻ー退勤時刻）',
        '出勤乖離時間（出勤時刻ーPC起動時刻）'
    ])
    
    return headers

def debug_structure():
    """構造を詳細にデバッグ"""
    headers = create_jinjer_headers()
    
    print(f"総ヘッダー数: {len(headers)}")
    print("\n=== 詳細構造デバッグ ===")
    
    # 出勤1と退勤1の位置を特定
    for i, header in enumerate(headers):
        if '出勤1' in header:
            print(f"出勤1の位置: インデックス {i} = '{header}'")
        if '退勤1' in header:
            print(f"退勤1の位置: インデックス {i} = '{header}'")
    
    # 各セクションの実際の開始位置を計算
    current_index = 0
    sections = [
        ('基本情報', 5),
        ('スケジュール情報', 14),
        ('休日設定', 1),
        ('実際の出退勤時刻', 20),
        ('実際の休憩時刻', 20),
        ('食事時間', 4),
        ('外出・再入', 10),
        ('休日休暇', 10),
        ('管理情報', 7),
        ('直行・直帰', 10),
        ('打刻区分ID', 10),
        ('勤務状況フラグ', 5),
        ('労働時間計算', 13),
        ('乖離時間', 3)
    ]
    
    print("\n=== セクション別詳細 ===")
    for section_name, count in sections:
        start = current_index
        end = current_index + count
        print(f"\n{section_name}: インデックス {start}-{end-1} ({count}列)")
        
        # 実際の出退勤時刻セクションの詳細を表示
        if section_name == '実際の出退勤時刻':
            for i in range(start, min(end, len(headers))):
                print(f"  [{i:3d}] {headers[i]}")
        
        current_index = end

if __name__ == "__main__":
    debug_structure()